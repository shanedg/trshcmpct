// This config supports type checking but all transpilation
// is left to Webpack and Babel.
{
  "compilerOptions": {
    // Treat `import x from 'y'` as `import * as x from 'y'`
    // when y has no default export
    "esModuleInterop": true,

    // Apply stricter rules around properties which have a ? prefix
    "exactOptionalPropertyTypes": true,

    // Enforce file case sensitivity
    "forceConsistentCasingInFileNames": true,

    // Leave JSX transformation to Babel
    "jsx": "preserve",

    // Include latest supported JS features
    "lib": ["ESNext", "DOM"],

    // ES6/ES2015 (default) -> ES2020 adds support for dynamic imports, and import.meta
    "module": "ES2020",

    // Node.js' CommonJS implementation
    "moduleResolution": "node",
    // TODO: `"moduleResolution": "Node16"`: Node.js' ECMAScript Module Support from TypeScript 4.5 onwards.
    // > Relative import paths need explicit file extensions in EcmaScript imports when '--moduleResolution' is 'node16' or 'nodenext'.
    // But!
    // > An import path cannot end with a '.tsx' extension. ...ts(2691)
    // Maybe use `extensionAlias` released in webpack@5.74.0:
    // https://github.com/webpack/webpack/releases/tag/v5.74.0
    // See https://github.com/webpack/webpack/issues/13252

    // Leave transpilation to Babel
    "noEmit": true,

    // Ignore inconsistent global definitions from Jest and Cypress
    "skipLibCheck": true,

    // Turn on all strict mode family options for
    // "stronger guarantees of program correctness"
    "strict": true,

    // Ensure module is set to at least "ES6/ES2015"
    "target": "ESNext",
  }
}
